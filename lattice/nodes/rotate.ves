import "blueprint.blueprint" for Blueprint
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2
import "blueprint.variant_helper" for VariantHelper
import "blueprint.node_helper" for NodeHelper
import "blueprint.nodes.array" for Array
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "maths.vector" for Vector2
import "geometry" for Polyline, Line
import "math" for Math

var EDITOR = nil

class Rotate is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEO),
			Pin(this, "p0",  VAR_TYPE_NUMBER2),
			Pin(this, "p1",  VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("p0", Vector2(0, 0)))
		this.params.add(NodeParam("p1", Vector2(0, 100)))

		this.layout()

		this.editor_pts = Array()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var p0 = NodeHelper.calc_prop_value(this, "p0")
		var p1 = NodeHelper.calc_prop_value(this, "p1")
		var angle = Math.atan2(p1.y - p0.y, p1.x - p0.x)

		var ret = []
		var geos = VariantHelper.flatten_values(v_geo, VAR_TYPE_GEO)
		for (var geo in geos)
		{
			var shape = geo.shape
			if (shape is Polyline) 
			{
				var verts = shape.get_vertices()
				for (var i in 0 .. verts.count / 2)
				{
					var x = verts[i * 2]
					var y = verts[i * 2 + 1]
					var r_pos = this.calc_rotate_pos([ x, y ], angle, p0)
					verts[i * 2] = r_pos[0]
					verts[i * 2 + 1] = r_pos[1]
				}

				var shape = Polyline.init()
				shape.set_vertices(verts)

				var geo = VarGeo()
				geo.shape = shape
				ret.add(Variant(VAR_TYPE_GEO, geo))
			}
			else if (shape is Line)
			{
				var verts = shape.get()
				var pos_s = this.calc_rotate_pos([ verts[0], verts[1] ], angle, p0)
				var pos_e = this.calc_rotate_pos([ verts[2], verts[3] ], angle, p0)

				var shape = Line.init()
				shape.set(pos_s[0], pos_s[1], pos_e[0], pos_e[1])

				var geo = VarGeo()
				geo.shape = shape
				ret.add(Variant(VAR_TYPE_GEO, geo))
			}
		}

		return Variant(ret)
	}

	calc_rotate_pos(pos, rad, axis)
	{
		var s = Math.sin(rad)
		var c = Math.cos(rad)

		var old_x = pos[0]
		var old_y = pos[1]
		var x = old_x - axis.x
		var y = old_y - axis.y

		var new_x = x * c - y * s
		var new_y = x * s + y * c

		return [ new_x + axis.x, new_y + axis.y ]
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		var p0 = this.query_param("p0").value
		var p1 = this.query_param("p1").value

		this.editor_pts.list.clear()
		this.editor_pts.list.add(Variant(Vector2(p0.x, p0.y)))
		this.editor_pts.list.add(Variant(Vector2(p1.x, p1.y)))

		Blueprint.connect(this.editor_pts.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		var p0 = this.query_param("p0").value
		var p1 = this.query_param("p1").value

		var v0 = this.editor_pts.list[0].value
		var v1 = this.editor_pts.list[1].value

		p0.set(v0.x, v0.y)
		p1.set(v1.x, v1.y)

		Blueprint.send_pin_dirty_root(this.exports[0])
	}	
}