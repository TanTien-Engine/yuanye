import "blueprint.blueprint" for Blueprint
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.variant" for Variant
import "blueprint.nodes.array" for Array
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "maths.vector" for Vector2
import "geometry" for Polyline

var EDITOR = nil

class Translate is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("offset", Vector2(0, 0)))

		this.layout()

		this.editor_pts = Array()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var shape = v_geo.value.shape

		var offset = this.query_param("offset").value
		if (shape is Polyline) 
		{
			var verts = shape.get_vertices()
			for (var i in 0 .. verts.count / 2)
			{
				verts[i * 2] = verts[i * 2] + offset.x
				verts[i * 2 + 1] = verts[i * 2 + 1] + offset.y
			}

			var shape = Polyline.init()
			shape.set_vertices(verts)

			var geo = VarGeo()
			geo.shape = shape
			return Variant(VAR_TYPE_GEO, geo)
		}

		return nil
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		var offset = this.query_param("offset").value

		this.editor_pts.list.clear()
		this.editor_pts.list.add(Variant(Vector2(offset.x, offset.y)))

		Blueprint.connect(this.editor_pts.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		var offset = this.query_param("offset").value
		var p = this.editor_pts.list[0].value

		offset.set(p.x, p.y)

		Blueprint.send_pin_dirty_root(this.exports[0])
	}	
}