import "blueprint.blueprint" for Blueprint
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2
import "blueprint.variant_helper" for VariantHelper
import "blueprint.node_helper" for NodeHelper
import "blueprint.nodes.array" for Array
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "maths.vector" for Vector2
import "geometry" for Line, Polyline

var EDITOR = nil

class Translate is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo",    VAR_TYPE_GEO),
			Pin(this, "offset", VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("offset", Vector2(0, 0)))

		this.layout()

		this.editor_pts = Array()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var offset = NodeHelper.calc_prop_value(this, "offset")

		var ret = []
		var geos = VariantHelper.flatten_values(v_geo, VAR_TYPE_GEO)
		for (var geo in geos)
		{
			var shape = geo.shape
			if (shape is Polyline) 
			{
				var verts = shape.get_vertices()
				for (var i in 0 .. verts.count / 2)
				{
					verts[i * 2] = verts[i * 2] + offset.x
					verts[i * 2 + 1] = verts[i * 2 + 1] + offset.y
				}

				var shape = Polyline.init()
				shape.set_vertices(verts)

				var geo = VarGeo()
				geo.shape = shape
				ret.add(Variant(VAR_TYPE_GEO, geo))
			}
			else if (shape is Line)
			{
				var verts = shape.get()
			
				var shape = Line.init()
				shape.set(verts[0] + offset.x, verts[1] + offset.y, verts[2] + offset.x, verts[3] + offset.y)

				var geo = VarGeo()
				geo.shape = shape
				ret.add(Variant(VAR_TYPE_GEO, geo))
			}
		}

		return Variant(ret)
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		var offset = this.query_param("offset").value

		this.editor_pts.list.clear()
		this.editor_pts.list.add(Variant(Vector2(offset.x, offset.y)))

		Blueprint.connect(this.editor_pts.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		var offset = this.query_param("offset").value
		var p = this.editor_pts.list[0].value

		offset.set(p.x, p.y)

		Blueprint.send_pin_dirty_root(this.exports[0])
	}	
}