import "blueprint.blueprint" for Blueprint
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2
import "blueprint.variant_helper" for VariantHelper
import "blueprint.node_helper" for NodeHelper
import "blueprint.nodes.array" for Array
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "lattice.trans_helper" for TransHelper
import "maths.vector" for Vector2
import "geometry" for Polyline, Line

var EDITOR = nil

class GlideReflect is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEO),
			Pin(this, "pos", VAR_TYPE_NUMBER2),
			Pin(this, "dir", VAR_TYPE_NUMBER2),
			Pin(this, "off", VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("pos", Vector2(0, 0)))
		this.params.add(NodeParam("dir", Vector2(0, 100)))
		this.params.add(NodeParam("off", Vector2(100, 0)))

		this.layout()

		this.editor_pts = Array()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var axis_pos = NodeHelper.calc_prop_value(this, "pos")
		var axis_dir = NodeHelper.calc_prop_value(this, "dir").clone()
		axis_dir.normalize()

		var off = NodeHelper.calc_prop_value(this, "off")
		var axis_dir_x = axis_dir.y
		var axis_dir_y = -axis_dir.x
		var dist = axis_dir_x * (off.x - axis_pos.x) + axis_dir_y * (off.y - axis_pos.y)
		var dx = dist * axis_dir_x
		var dy = dist * axis_dir_y

		var ret = []

		var geos = VariantHelper.flatten_values(v_geo, VAR_TYPE_GEO)
		for (var geo in geos)
		{
			var shape = geo.shape
			if (shape is Polyline) 
			{
				var verts = shape.get_vertices()
				for (var i in 0 .. verts.count / 2)
				{
					var pos = [ verts[i * 2], verts[i * 2 + 1] ]
					TransHelper.reflect_pos(pos, axis_pos, axis_dir)
					verts[i * 2]     = pos[0] + dx
					verts[i * 2 + 1] = pos[1] + dy
				}

				var shape = Polyline.init()
				shape.set_vertices(verts)

				var geo = VarGeo()
				geo.shape = shape
				ret.add(Variant(VAR_TYPE_GEO, geo))
			}
			else if (shape is Line)
			{
				var verts = shape.get()

				var pos_s = [ verts[0], verts[1] ]
				TransHelper.reflect_pos(pos_s, axis_pos, axis_dir)

				var pos_e = [ verts[2], verts[3] ]
				TransHelper.reflect_pos(pos_e, axis_pos, axis_dir)

				var shape = Line.init()
				shape.set(pos_s[0] + dx, pos_s[1] + dy, pos_e[0] + dx, pos_e[1] + dy)

				var geo = VarGeo()
				geo.shape = shape
				ret.add(Variant(VAR_TYPE_GEO, geo))
			}
		}

		return Variant(ret)
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		var pos = this.query_param("pos").value
		var dir = this.query_param("dir").value
		var off = this.query_param("off").value

		this.editor_pts.list.clear()
		this.editor_pts.list.add(Variant(Vector2(pos.x, pos.y)))
		this.editor_pts.list.add(Variant(Vector2(dir.x, dir.y)))
		this.editor_pts.list.add(Variant(Vector2(off.x, off.y)))

		Blueprint.connect(this.editor_pts.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		var pos = this.query_param("pos").value
		var dir = this.query_param("dir").value
		var off = this.query_param("off").value

		var p = this.editor_pts.list[0].value
		var d = this.editor_pts.list[1].value
		var o = this.editor_pts.list[2].value

		pos.set(p.x, p.y)
		dir.set(d.x, d.y)
		off.set(o.x, o.y)

		Blueprint.send_pin_dirty_root(this.exports[0])
	}	
}